<!DOCTYPE html>
<html lang='en'>
<head>
  <meta charset='utf-8' />
  <meta name="viewport" content="width=device-width, initial-scale=1" />

  <!-- Bootstrap -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

  <link href='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.17/index.global.min.css' rel='stylesheet' />
  <script src='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.17/index.global.min.js'></script>

  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

  <style>
    body {
      background-image: url('images/background1.png');
      background-size: cover;
      background-position: center;
      background-repeat: no-repeat;
      height: 100vh;
    }

    #calendar, #chart-container {
      background: white;
      padding: 1rem;
      border-radius: 12px;
      box-shadow: 0 0 10px rgba(0,0,0,0.05);
    }

    #calendar {
      min-height: 500px;
    }

    @media (max-width: 767.98px) {
      #calendar, #chart-container {
        margin-bottom: 1rem;
      }
    }
  </style>
</head>

<body class="bg-light">
  <div class="container py-4">
    <h1 class="text-center fw-bold mb-4">Calendar Dashboard</h1>

    <div class="row gy-4 gx-4">
      <div class="col-12 col-md-6">
        <div id='calendar'></div>
      </div>

      <div class="col-12 col-md-6">
        <div id="chart-container">
          <h5 class="text-center mb-3">Weekly Study Breakdown</h5>
          <canvas id="studyChart"></canvas>
        </div>
      </div>
    </div>
  </div>

  <div class="modal fade" id="eventModal" tabindex="-1" aria-labelledby="eventModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <form id="eventForm">
          <div class="modal-header">
            <h5 class="modal-title" id="eventModalLabel">Study Session</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <input type="hidden" id="selectedDate" />
            <input type="hidden" id="editEventId" />
            <div class="mb-3">
              <label for="subject" class="form-label">Subject</label>
              <input type="text" class="form-control" id="subject" required />
            </div>
            <div class="mb-3">
              <label for="startTime" class="form-label">Start Time</label>
              <input type="time" class="form-control" id="startTime" required />
            </div>
            <div class="mb-3">
              <label for="endTime" class="form-label">End Time</label>
              <input type="time" class="form-control" id="endTime" required />
            </div>
            <div class="mb-3">
              <label for="categoryColor" class="form-label">Category Color</label>
              <input type="color" class="form-control form-control-color" id="categoryColor" value="#36A2EB" />
            </div>
          </div>
          <div class="modal-footer d-flex justify-content-between">
            <button type="button" id="deleteBtn" class="btn btn-outline-danger">Delete</button>
            <button type="submit" class="btn btn-primary">Save</button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function () {
      const calendarEl = document.getElementById('calendar');
      const ctx = document.getElementById('studyChart').getContext('2d');
      const modalEl = document.getElementById('eventModal');
      const modal = new bootstrap.Modal(modalEl);
      const eventForm = document.getElementById('eventForm');

      let currentEditEvent = null;

      const calendar = new FullCalendar.Calendar(calendarEl, {
        initialView: 'dayGridMonth',
        editable: true,
        selectable: true,

        dateClick: function (info) {
          currentEditEvent = null;
          document.getElementById('eventModalLabel').textContent = "Add Study Session";
          document.getElementById('selectedDate').value = info.dateStr;
          document.getElementById('editEventId').value = '';
          document.getElementById('subject').value = '';
          document.getElementById('startTime').value = '10:00';
          document.getElementById('endTime').value = '11:00';
          document.getElementById('categoryColor').value = '#36A2EB';
          modal.show();
        },

        eventClick: function (info) {
          currentEditEvent = info.event;
          const start = new Date(info.event.start);
          const end = new Date(info.event.end || start);

          document.getElementById('eventModalLabel').textContent = "Edit Study Session";
          document.getElementById('editEventId').value = info.event.id;
          document.getElementById('selectedDate').value = start.toISOString().slice(0, 10);
          document.getElementById('subject').value = info.event.title;
          document.getElementById('startTime').value = start.toTimeString().slice(0, 5);
          document.getElementById('endTime').value = end.toTimeString().slice(0, 5);
          document.getElementById('categoryColor').value = info.event.backgroundColor || info.event.color || '#36A2EB';
          modal.show();
        },

        events: [],
        eventAdd: updateChart,
        eventChange: updateChart,
        eventRemove: updateChart
      });
    
        calendar.render();
        fetch('/api/sessions')
        .then(res => res.json())
        .then(events => {
            events.forEach(event => calendar.addEvent(event));
            updateChart(); 
        })
        .catch(err => console.error('Failed to load sessions:', err));
        calendar.render();



      const studyChart = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: [],
          datasets: [{
            label: 'Hours',
            data: [],
            backgroundColor: [],
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          scales: {
            y: {
              beginAtZero: true,
              title: {
                display: true,
                text: 'Hours'
              }
            }
          }
        }
      });

    eventForm.addEventListener('submit', async function (e) {
        e.preventDefault();

        const title = document.getElementById('subject').value;
        const date = document.getElementById('selectedDate').value;
        const start = date + 'T' + document.getElementById('startTime').value;
        const end = date + 'T' + document.getElementById('endTime').value;
        const color = document.getElementById('categoryColor').value;

        if (currentEditEvent) {
            currentEditEvent.setProp('title', title);
            currentEditEvent.setStart(start);
            currentEditEvent.setEnd(end);
            currentEditEvent.setProp('color', color);

        } else {
            const newEvent = calendar.addEvent({
            title: title,
            start: start,
            end: end,
            color: color
            });

            try {
            const response = await fetch('/api/sessions', {
                method: 'POST',
                headers: {
                'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                title,
                start_time: start,
                end_time: end
                })
            });

            if (!response.ok) {
                console.error('Failed to save session');
            }
            } catch (err) {
            console.error('Error saving session:', err);
            }
        }

        modal.hide();
        updateChart();
        });

      document.getElementById('deleteBtn').addEventListener('click', function () {
        currentEditEvent.remove();
        modal.hide();
        updateChart();
      });

      function updateChart() {
        const events = calendar.getEvents();
        const subjectTotals = {};
        const colorMap = {};

        events.forEach(event => {
          const title = event.title;
          const start = new Date(event.start);
          const end = new Date(event.end || start);
          const duration = (end - start) / (1000 * 60 * 60); 

          if (subjectTotals[title]) {
            subjectTotals[title] += duration;
          } else {
            subjectTotals[title] = duration;
            colorMap[title] = event.backgroundColor || event.color || '#36A2EB';
          }
        });

        studyChart.data.labels = Object.keys(subjectTotals);
        studyChart.data.datasets[0].data = Object.values(subjectTotals).map(val => parseFloat(val.toFixed(2)));
        studyChart.data.datasets[0].backgroundColor = Object.keys(subjectTotals).map(label => colorMap[label] || '#36A2EB');
        studyChart.update();
      }

      updateChart();
    });
  </script>
</body>
</html>
