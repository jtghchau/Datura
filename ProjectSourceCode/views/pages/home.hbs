<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>home</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        body {
            background-image: url('/images/background1.png');
            background-size: cover;
            background-position: center;
            background-attachment: fixed;
            height: 100vh;
        }

        .sticky-note {
            position: absolute;
            width: 200px;
            min-height: 150px;
            background-color: #fffa7c;
            border: 1px solid #e3e3e3;
            border-radius: 8px;
            padding: 10px;
            box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);
            cursor: move;
            z-index: 1000;
        }

        .sticky-note[contenteditable="true"]:focus {
            outline: 2px dashed #333;
        }

        .note-delete {
            position: absolute;
            top: 5px;
            right: 8px;
            cursor: pointer;
            font-weight: bold;
            color: red;
        }

        .avatar-container {
            position: absolute;
            width: 270px;
            height: 407px;
            margin: auto;
            overflow: hidden;
            bottom: 36%;
            left: 50%;
            transform: translateX(-50%);
        }

        .coin-box {
            display: flex;
            background-color: white;
            padding: 5px 10px;
            border-radius: 25px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        .coin-box img {
            width: 24px;
            /* Adjust size of the coin image */
            height: 24px;
            /* Adjust size of the coin image */
            margin-right: 4px;
            /* Space between image and text */
        }

        .home-icons {
            gap: 7px;
            padding-top: 0px !important;
        }

        .home-icons .icon-link {
            /*color: white;*/
            background-color: rgba(255, 255, 255, 0.75);
            padding: 7px;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            /* Vertically center the icon */
            line-height: 1;
            margin-right: auto;
        }

        .home-icons .icon-link i {
            font-size: 24px;
            /* Adjust icon size if needed */
            display: inline-block;
        }

        .btn-light {
            color: white !important;
            background: none;
            border: none;
            padding: 0;
            text-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        .btn-light:hover {
            color: gray !important;
            background: none;
        }

        .dropdown {
            display: flex;
            justify-content: center;
        }

        .subject-btn {
            background-color: white;
            color: #000;
            border-radius: 25px;
            min-width: 200px;
            text-align: left;
            border: none;
            padding: 5px 10px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            display: flex;
            justify-content: space-between;
            /* Ensures the arrow is at the far right */
            align-items: center;
            /* Vertically center the text and arrow */
        }

        .subject-btn .dropdown-toggle::after {
            content: '\f107';
            /* Unicode for the downward arrow */
            font-family: 'Bootstrap Icons';
            /* Ensure the correct font family is used for the icon */
            margin-left: 10px;
            /* Space between text and the arrow */
        }

        .placeholder-text {
            color: #999;
            /* lighter gray for "Select Subject" */
        }

        .custom-dropdown {
            border-radius: 15px;
            width: 200px;
            /* match button width */
            border: none;
            overflow: hidden;
        }

        .dropdown-item {
            color: #000;
            font-size: 0.9rem;
        }

        @media (max-width: 363px) {
            .subject-btn {
                min-width: 156px;
            }

            .custom-dropdown {
                width: 156px;
            }
        }

        .timer-container {
            position: fixed;
            bottom: 70px;
            left: 50%;
            transform: translateX(-50%);
            text-align: center;

        }

        .timer-display {
            font-size: 64px;
            font-weight: 600;
            font-family: 'SF Pro Display', sans-serif;
            color: white;
            text-shadow: 0 2px 6px rgba(0, 0, 0, 0.5);
        }

        .timer-controls {
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .timer-input {
            width: 60px;
            padding: 6px;
            font-size: 18px;
            border-radius: 10px;
            border: none;
            text-align: center;
            outline: none;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }

        .start-btn,
        .pause-btn,
        .reset-btn {
            padding: 6px 12px;
            font-size: 16px;
            font-weight: bold;
            background-color: white;
            color: black;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }

        .start-btn:hover,
        .pause-btn:hover,
        .reset-btn:hover {
            background-color: #ddd;
        }
    </style>

</head>

<script>
    let countdownInterval;
    let isPaused = false;
    let remainingSeconds = 0;

    function startTimer() {
        if (!isPaused) {
            const minutes = parseInt(document.getElementById('minutesInput').value) || 0;
            const seconds = parseInt(document.getElementById('secondsInput').value) || 0;
            remainingSeconds = minutes * 60 + seconds;
        }
        isPaused = false;

        clearInterval(countdownInterval); // Reset if already running

        updateDisplay(remainingSeconds);

        countdownInterval = setInterval(() => {
            remainingSeconds--;
            if (remainingSeconds < 0) {
                clearInterval(countdownInterval);
                // Optional: play sound or alert
                // Asked team waiting to see
                return;
            }
            updateDisplay(remainingSeconds);
        }, 1000);
    }

    function pauseTimer() {
        clearInterval(countdownInterval);
        isPaused = true;
    }

    function resetTimer() {
        clearInterval(countdownInterval);
        remainingSeconds = 0;
        isPaused = false;
        updateDisplay(0);
        document.getElementById('minutesInput').value = '';
        document.getElementById('secondsInput').value = '';
    }

    function updateDisplay(remainingSeconds) {
        const min = String(Math.floor(remainingSeconds / 60)).padStart(2, '0');
        const sec = String(remainingSeconds % 60).padStart(2, '0');
        document.getElementById('timerDisplay').textContent = `${min}:${sec}`;
    }
</script>


<body>

    <div id="stickyNotesContainer"></div>
    <div class="container-fluid d-flex justify-content-between align-items-center p-3">
        <!-- Coins Box -->
        <div class="coin-box">
            <img src="/images/coin.png" alt="Coin">
            <span>{{coins}}</span>
        </div>

        <div class="dropdown-container d-flex align-items-center gap-2">
            <div class="dropdown">
                <button class="dropdown-toggle subject-btn" type="button" id="subjectDropdown" data-bs-toggle="dropdown"
                    aria-expanded="false">
                    <span id="selectedSubject" class="placeholder-text">Select Subject</span>
                </button>
                <ul class="dropdown-menu custom-dropdown" aria-labelledby="subjectDropdown">
                    <li>
                        <a class="dropdown-item d-flex align-items-center" href="#" data-value="Math"
                            data-color="#4F8EF7">
                            <span class="subject-color-circle" style="background-color: #4F8EF7;"></span>
                            Math
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item d-flex align-items-center" href="#" data-value="English"
                            data-color="#F78E4F">
                            <span class="subject-color-circle" style="background-color: #F78E4F;"></span>
                            English
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item d-flex align-items-center" href="#" data-value="History"
                            data-color="#8E44AD">
                            <span class="subject-color-circle" style="background-color: #8E44AD;"></span>
                            History
                        </a>
                    </li>
                </ul>

            </div>
            <button class="btn btn-light d-flex align-items-center justify-content-center" id="addSubjectBtn">
                <i class="bi bi-pencil-fill"></i>
            </button>
        </div>
    </div>


    <!-- Icons -->
    <div class="home-icons d-flex flex-column align-items-center p-3">
        <a class="icon-link" href="#" id="showStickyNoteBtn">
            <i class="bi bi-journal-bookmark-fill fs-5" style="color: rgb(91, 91, 91);"></i>
        </a>
        <a class="icon-link" href="/store">
            <i class="bi bi-handbag-fill fs-5" style="color: rgb(255, 132, 228);"></i>
        </a>
        <a class="icon-link" href="/notifications">
            <i class="bi bi-bell-fill fs-5" style="color: rgb(255, 194, 27);"></i>
        </a>
    </div>



    {{> avatar}}

    {{> timer}}

    {{> subjectModal}}

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        //dropdown menu functionality 
        document.querySelectorAll('.dropdown-item').forEach(item => {
            item.addEventListener('click', event => {
                const selected = item.getAttribute('data-value');
                const color = item.getAttribute('data-color');
                const subjectSpan = document.getElementById('selectedSubject');
                subjectSpan.textContent = selected;
                subjectSpan.classList.remove('placeholder-text'); // make text black
            });
        });
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const container = document.getElementById('stickyNotesContainer');

            // Function to handle drag events
            function setupDrag(noteEl, contentDiv, noteId) {
                let offsetX, offsetY, isDragging = false;

                noteEl.addEventListener('mousedown', e => {
                    isDragging = true;
                    offsetX = e.offsetX;
                    offsetY = e.offsetY;
                    noteEl.style.zIndex = 9999;

                    const mousemove = (e) => {
                        if (isDragging) {
                            noteEl.style.left = (e.pageX - offsetX) + 'px';
                            noteEl.style.top = (e.pageY - offsetY) + 'px';
                        }
                    };

                    const mouseup = async () => {
                        if (!isDragging) return;
                        isDragging = false;
                        noteEl.style.zIndex = '';
                        document.removeEventListener('mousemove', mousemove);
                        document.removeEventListener('mouseup', mouseup);

                        // Save the new position after dragging
                        const left = parseInt(noteEl.style.left);
                        const top = parseInt(noteEl.style.top);
                        const content = contentDiv.textContent.trim();

                        await fetch(`/api/notes/${noteId}`, {
                            method: 'PUT',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ content, pos_left: left, pos_top: top })
                        });
                    };

                    document.addEventListener('mousemove', mousemove);
                    document.addEventListener('mouseup', mouseup);
                });
            }

            function renderNote(note) {
                const noteEl = document.createElement('div');
                noteEl.className = 'sticky-note';
                noteEl.style.left = note.pos_left + 'px';
                noteEl.style.top = note.pos_top + 'px';
                noteEl.dataset.id = note.note_id;

                const contentDiv = document.createElement('div');
                contentDiv.className = 'note-content';
                contentDiv.contentEditable = true;
                contentDiv.textContent = note.content;

                const deleteBtn = document.createElement('div');
                deleteBtn.className = 'note-delete';
                deleteBtn.innerHTML = '&times;';

                deleteBtn.onclick = async () => {
                    await fetch(`/api/notes/${note.note_id}`, { method: 'DELETE' });
                    noteEl.remove();
                };

                contentDiv.addEventListener('blur', async () => {
                    const content = contentDiv.textContent.trim();
                    const left = parseInt(noteEl.style.left);
                    const top = parseInt(noteEl.style.top);

                    await fetch(`/api/notes/${note.note_id}`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ content, pos_left: left, pos_top: top })
                    });
                });

                noteEl.appendChild(deleteBtn);
                noteEl.appendChild(contentDiv);
                container.appendChild(noteEl);

                setupDrag(noteEl, contentDiv, note.note_id); // now includes contentDiv and ID
            }

            // Load existing notes
            fetch('/api/notes')
                .then(res => res.json())
                .then(notes => {
                    notes.forEach(renderNote);
                });

            // Add new note on button click
            document.getElementById('showStickyNoteBtn').addEventListener('click', async (e) => {
                e.preventDefault();

                const response = await fetch('/api/notes', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ content: 'New Note', pos_left: 100, pos_top: 100 })
                });

                if (response.ok) {
                    const note = await response.json();
                    renderNote(note);
                }
            });
        });








    </script>

</body>



</html>