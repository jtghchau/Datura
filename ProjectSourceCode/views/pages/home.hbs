<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>home</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        .sticky-note {
        position: absolute;
        width: 200px;
        min-height: 150px;
        background-color: #fffa7c;
        border: 1px solid #e3e3e3;
        border-radius: 8px;
        padding: 10px;
        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);
        cursor: move;
        z-index: 1000; 
        }
        .sticky-note[contenteditable="true"]:focus {
            outline: 2px dashed #333;
        }
        .note-delete {
            position: absolute;
            top: 5px;
            right: 8px;
            cursor: pointer;
            font-weight: bold;
            color: red;
        }

        .avatar-container {
            position: absolute;
            width: 270px;
            height: 407px;
            margin: auto;
            overflow: hidden;
            bottom: 36%;
            left: 50%;
            transform: translateX(-50%);
        }

        .home-icons {
            gap: 7px;
            padding-top: 0px !important;
        }

        .home-icons .icon-link {
            /*color: white;*/
            background-color: rgba(255, 255, 255, 0.75);
            padding: 7px;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center; /* Vertically center the icon */
            line-height: 1; 
            margin-right: auto;
        }

        .home-icons .icon-link i {
            font-size: 24px; /* Adjust icon size if needed */
            display: inline-block; 
        }

        .btn-light {
            color: white !important;
            background: none;
            border: none;
            padding: 0;
            text-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        .btn-light:hover {
            color: gray !important;
            background: none;
        }

        .dropdown {
            display: flex;
            justify-content: center;
        }

        .subject-btn {
            background-color: white;
            color: #000;
            border-radius: 25px;
            min-width: 200px; 
            text-align: left;
            border: none;
            padding: 5px 10px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            display: flex;
            justify-content: space-between; /* Ensures the arrow is at the far right */
            align-items: center; /* Vertically center the text and arrow */
        }

        .subject-btn .dropdown-toggle::after {
            content: '\f107'; /* Unicode for the downward arrow */
            font-family: 'Bootstrap Icons'; /* Ensure the correct font family is used for the icon */
            margin-left: 10px; /* Space between text and the arrow */
        }

        .placeholder-text {
            color: #999; /* lighter gray for "Select Subject" */
        }

        .custom-dropdown {
            border-radius: 15px;
            width: 200px; /* match button width */
            border: none;
            overflow: hidden;
        }

        .dropdown-item {
            color: #000;
            font-size: 0.9rem;
        }

        @media (max-width: 363px) {
            .subject-btn {
                min-width: 156px;
            }

            .custom-dropdown {
                width: 156px;
            }
        }

        .subject-color-circle {
            display: inline-block;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 8px;
        }


    </style>

</head>

<body>

    <div id="stickyNotesContainer"></div>
    <div class="container-fluid d-flex justify-content-between align-items-center p-3">
        {{> coins}}

    <div class="dropdown-container d-flex align-items-center gap-2">
        <div class="dropdown">
            <button class="dropdown-toggle subject-btn" type="button" id="subjectDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                <span id="selectedSubject" class="placeholder-text">Select Category</span>
            </button>
            <ul class="dropdown-menu custom-dropdown" aria-labelledby="subjectDropdown">
                {{#each categories}}
                    <li>
                        <a class="dropdown-item d-flex align-items-center"
                            href="#"
                            data-id="{{this.category_id}}"
                            data-value="{{this.category_name}}"
                            data-color="{{this.category_color}}">
                            <span class="subject-color-circle" style="background-color: {{this.category_color}};"></span>
                            {{this.category_name}}
                        </a>

                    </li>
                {{/each}}
            </ul>

        </div>
        <button class="btn btn-light d-flex align-items-center justify-content-center" id="addSubjectBtn">
            <i class="bi bi-pencil-fill"></i>
        </button>
    </div>
    </div>
        

    <!-- Icons -->
    <div class="home-icons d-flex flex-column align-items-center p-3">
        <a class="icon-link" href="#" id="showStickyNoteBtn">
            <i class="bi bi-journal-bookmark-fill fs-5" style="color: rgb(91, 91, 91);"></i>
        </a>
        <a class="icon-link" href="/store">
            <i class="bi bi-handbag-fill fs-5" style="color: rgb(255, 132, 228);"></i>
        </a>
    </div>



    {{> avatar}}

    {{> timer}}

    {{> subjectModal}}

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const subjectSpan = document.getElementById('selectedSubject');
            const dropdownMenu = document.querySelector('.custom-dropdown');

            // Set selection function for any subject
            function selectSubject(id, name, color) {
                localStorage.setItem('selectedSubjectId', id);
                localStorage.setItem('selectedSubjectValue', name);
                localStorage.setItem('selectedSubjectColor', color);

                window.selectedSubjectId = id;
                window.selectedSubjectValue = name;
                window.selectedSubjectColor = color;

                subjectSpan.innerHTML = `
                    <span class="subject-color-circle" style="background-color: ${color}; margin-right: 8px;"></span>
                    ${name}
                `;
                subjectSpan.classList.remove('placeholder-text');
            }

            // Handle dropdown item click using delegation (works for new items too)
            dropdownMenu.addEventListener('click', (e) => {
                const item = e.target.closest('.dropdown-item');
                if (item) {
                    e.preventDefault();
                    const id = item.getAttribute('data-id');
                    const name = item.getAttribute('data-value');
                    const color = item.getAttribute('data-color');
                    selectSubject(id, name, color);
                }
            });

            // Try to restore saved subject on load
            const savedId = localStorage.getItem('selectedSubjectId');
            const savedName = localStorage.getItem('selectedSubjectValue');
            const savedColor = localStorage.getItem('selectedSubjectColor');

            if (savedId && savedName && savedColor) {
                // Check if the subject still exists in the dropdown list
                const validIds = Array.from(dropdownMenu.querySelectorAll('.dropdown-item')).map(item =>
                    item.getAttribute('data-id')
                );

                if (validIds.includes(savedId)) {
                    selectSubject(savedId, savedName, savedColor);
                } else {
                    localStorage.clear();
                    subjectSpan.innerText = 'Select Category';
                    subjectSpan.classList.add('placeholder-text');
                }
            }

            // Ensure that the subject is correctly reflected in the dropdown on load
            // If the saved subject exists, it will be highlighted in the dropdown.
            const selectedSubjectId = localStorage.getItem('selectedSubjectId');
            if (selectedSubjectId) {
                const selectedItem = dropdownMenu.querySelector(`[data-id="${selectedSubjectId}"]`);
                if (selectedItem) {
                    selectSubject(
                        selectedItem.getAttribute('data-id'),
                        selectedItem.getAttribute('data-value'),
                        selectedItem.getAttribute('data-color')
                    );
                }
            }
        });

    </script>




    <script>
 document.addEventListener('DOMContentLoaded', () => {
  const container = document.getElementById('stickyNotesContainer');

  // Function to handle drag events
  function setupDrag(noteEl, contentDiv, noteId) {
    let offsetX, offsetY, isDragging = false;

    noteEl.addEventListener('mousedown', e => {
      isDragging = true;
      offsetX = e.offsetX;
      offsetY = e.offsetY;
      noteEl.style.zIndex = 9999;

      const mousemove = (e) => {
        if (isDragging) {
          noteEl.style.left = (e.pageX - offsetX) + 'px';
          noteEl.style.top = (e.pageY - offsetY) + 'px';
        }
      };

      const mouseup = async () => {
        if (!isDragging) return;
        isDragging = false;
        noteEl.style.zIndex = '';
        document.removeEventListener('mousemove', mousemove);
        document.removeEventListener('mouseup', mouseup);

        // Save the new position after dragging
        const left = parseInt(noteEl.style.left);
        const top = parseInt(noteEl.style.top);
        const content = contentDiv.textContent.trim();

        await fetch(`/api/notes/${noteId}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ content, pos_left: left, pos_top: top })
        });
      };

      document.addEventListener('mousemove', mousemove);
      document.addEventListener('mouseup', mouseup);
    });
  }

  function renderNote(note) {
    const noteEl = document.createElement('div');
    noteEl.className = 'sticky-note';
    noteEl.style.left = note.pos_left + 'px';
    noteEl.style.top = note.pos_top + 'px';
    noteEl.dataset.id = note.note_id;

    const contentDiv = document.createElement('div');
    contentDiv.className = 'note-content';
    contentDiv.contentEditable = true;
    contentDiv.textContent = note.content;

    const deleteBtn = document.createElement('div');
    deleteBtn.className = 'note-delete';
    deleteBtn.innerHTML = '&times;';

    deleteBtn.onclick = async () => {
      await fetch(`/api/notes/${note.note_id}`, { method: 'DELETE' });
      noteEl.remove();
    };

    contentDiv.addEventListener('blur', async () => {
      const content = contentDiv.textContent.trim();
      const left = parseInt(noteEl.style.left);
      const top = parseInt(noteEl.style.top);

      await fetch(`/api/notes/${note.note_id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ content, pos_left: left, pos_top: top })
      });
    });

    noteEl.appendChild(deleteBtn);
    noteEl.appendChild(contentDiv);
    container.appendChild(noteEl);

    setupDrag(noteEl, contentDiv, note.note_id); // now includes contentDiv and ID
  }

  // Load existing notes
  fetch('/api/notes')
    .then(res => res.json())
    .then(notes => {
      notes.forEach(renderNote);
    });

  // Add new note on button click
  document.getElementById('showStickyNoteBtn').addEventListener('click', async (e) => {
    e.preventDefault();

    const response = await fetch('/api/notes', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ content: 'New Note', pos_left: 100, pos_top: 100 })
    });

    if (response.ok) {
      const note = await response.json();
      renderNote(note);
    }
  });
});









    </script>

</body>


</html>