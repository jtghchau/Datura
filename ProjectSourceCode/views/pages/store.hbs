<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>store</title>

    <style>
        h1 {
            color: white;;
        }

        .store-container {
            background-color: rgba(255, 255, 255, 0.85);
            padding: 20px;
            border-radius: 25px;
            width: fit-content;
            margin: 0; 
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            text-align: center;
            flex: 0 1 auto; /* Allows container to grow but not shrink */
        }

        .store-head {
            position: relative;
            display: flex;
            align-items: center;
            justify-content: center; /* center tabs container */
            margin-bottom: 20px;
        }

        /* Back arrow */
        .store-head a {
            font-size: 2.5rem !important;
            font-weight: bold;
            padding: 0;
            margin: 0;
            position: absolute;
            left: 0;
            top: 15%;
            transform: translateY(-50%);
            font-size: 2rem;
            font-weight: bold;
            text-decoration: none;
            color: #445368;
        }

        /* Tabs are naturally centered by flex + margin auto */
        .category-tabs {
            display: flex;
            justify-content: center;
            background-color: aqua;
            border-radius: 8px;
            overflow: hidden;
            width: fit-content;
            margin-bottom: 20px;
            margin-left: auto;
            margin-right: auto;
        }

        .tab-button {
            font-size: 1rem;
            background-color: #dfe6ef;
            /*border: 1px solid #3f4e62;*/
            border: none;
            color: #445368;
            padding: 8px 18px;
            cursor: pointer;
            transition: background-color 0.2s ease;
        }

        .tab-button.active,
        .tab-button:hover {
            background-color: #64a2ce;
            color: white;
            border-color: #6cb4e7;
        }
        

        .items-grid {
            display: grid;
            grid-template-columns: repeat(4, 150px); /* exactly 4 items per row */
            gap: 16px;
            justify-content: center; /* centers the entire grid horizontally */
        }


        .item-card {
            background-color: white;
            border-radius: 20px;
            padding: 12px;
            box-shadow: 0 3px 10px rgba(0,0,0,0.15);
            text-align: center;
        }

        .item-card img {
            width: 100px;
            height: auto;
        }

        .item-info {
            margin-top: 8px;
        }

        .item-info .coin-icon {
            width: 16px;
            vertical-align: middle;
        }

        /* Button Base Styles */
        .buy-btn, .equip-btn, .unequip-btn {
        padding: 8px 12px;
        border: none;
        border-radius: 20px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s ease;
        text-transform: uppercase;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        margin-top: 8px;
        width: 85px; 
        display: inline-block;
        text-align: center;
        font-family: inherit; 
        }

        .buy-btn {
        background-color: #4285f4;
        color: white;
        font-size: 0.9rem;
        }

        .equip-btn {
        background-color: #34a853;
        color: white;
        font-size: 0.9rem;
        }

        .unequip-btn {
        background-color: #2d9248;
        color: white;
        font-size: 0.8rem; /* Specifically smaller font */
        padding: 8px 10px; 
        }

        /* Hover States */
        .buy-btn:hover { 
            background-color: #3367d6; 
            transform: translateY(-1px); 
        }
        .equip-btn:hover { 
            background-color: #2d9248; 
            transform: translateY(-1px); 
        }
        .unequip-btn:hover { 
            background-color: #247c3c; 
            transform: translateY(-1px); 
        }

        /* Active States */
        .buy-btn:active, .equip-btn:active, .unequip-btn:active {
        transform: translateY(0);
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }

        .store-avatar-wrapper {
            display: flex;
            justify-content: center; 
            align-items: flex-start; 
            gap: 60px; /* Space between store and avatar */
            max-width: 1100px; 
            margin: 0 auto; 
            padding: 20px;
            position: relative;
        }

        /* Update avatar container positioning */
        .avatar-container {
            position: sticky;
            top: 100px; /* Adjust based on your header height */
            width: 270px;
            height: 407px;
            margin: 0; /* Remove previous absolute positioning */
            transform: none; /* Remove previous transform */
            left: auto;
            bottom: auto;
        }

    </style>

</head>

<body>
    <div class="container-fluid d-flex justify-content-between align-items-center p-3">
        {{> coins}}
    </div>
    <h1 class="text-center fw-bold">Store</h1>
    <div class = "store-avatar-wrapper">
        <div class="store-container">
            <div class="store-head">
                <a href="/home">
                    <i class="bi bi-arrow-left-short"></i>
                </a>
                <div class="category-tabs">
                    <button class="tab-button active" data-category="head">Head</button>
                    <button class="tab-button" data-category="body">Body</button>
                    <button class="tab-button" data-category="pants">Pants</button>
                </div>
            </div>
            <div class="items-grid" id="itemsGrid"></div>
        </div>
        {{> avatar equippedItems=equippedItems}}
    </div>

    <script>
        let coins = 0; // fetched
        let ownedItems = new Set();
        let equippedItems = {
            head: null,
            body: null,
            pants: null
        };
        let items = [];
        let allItems = []; //all items in all categories
        let userId = '{{user.username}}'; // Inject the user ID from the server-side template

        async function initializeStore() {
            const categories = ['head', 'body', 'pants'];
            const promises = categories.map(cat => fetch(`/api/store/${cat}`));
            
            const responses = await Promise.all(promises);
            const categoryItems = await Promise.all(responses.map(r => r.json()));
            
            // Ensure category is preserved
            allItems = categoryItems.flatMap((categoryGroup, i) => 
                categoryGroup.map(item => ({
                    id: item.item_id,
                    name: item.name,
                    image: item.image_path,
                    price: item.cost,
                    category: categories[i] // Use the category from the endpoint
                }))
            );
            
            updateAvatar();
        }

        // Fetch clothing items available for sale
        async function fetchItems(category) {
            try {
                const response = await fetch(`/api/store/${category}`);
                if (!response.ok) throw new Error('Failed to fetch items');
                const rawItems = await response.json();

                const mappedItems = rawItems.map(item => ({
                    id: item.item_id,
                    name: item.name,
                    image: item.image_path,
                    price: item.cost,
                    category: item.category || category // Fallback to the requested category
                }));

                console.log("Raw items from API:", rawItems);
                console.log("Requested category:", category);

                renderItems(mappedItems, category);
            } catch (error) {
                console.error('Error fetching items:', error);
            }
        }

        // Fetch owned items and equipped items from the server
        async function fetchUserItems() {
            const response = await fetch('/api/user/items');
            const data = await response.json();
            ownedItems = new Set(data.owned);
            equippedItems = data.equipped;
            updateAvatar();
        }

        // Render items for the selected category
        function renderItems(newItems, category) {
            console.log('Rendering items:', newItems);

            items = newItems;
            const container = document.getElementById('itemsGrid');
            container.innerHTML = '';

            items.forEach(item => {
                const isOwned = ownedItems.has(item.id);
                const isEquipped = equippedItems[item.category] === item.id;

                const card = document.createElement('div');
                card.className = 'item-card';
                card.innerHTML = `
                    <img src="${item.image}" alt="${item.name}">
                    <div class="item-info">
                        <p>${item.name}</p>
                        <p><img src="/images/coin.png" class="coin-icon"> ${item.price}</p>
                        <button class="buy-btn" ${isOwned ? 'style="display:none;"' : ''}>Buy</button>
                        <button class="equip-btn" ${!isOwned || isEquipped ? 'style="display:none;"' : ''}>Equip</button>
                        <button class="unequip-btn" ${isEquipped ? '' : 'style="display:none;"'}>Unequip</button>
                    </div>
                `;

                const buyBtn = card.querySelector('.buy-btn');
                const equipBtn = card.querySelector('.equip-btn');
                const unequipBtn = card.querySelector('.unequip-btn');

                if (buyBtn) {
                    buyBtn.addEventListener('click', async () => {
                        try {
                            const result = await buyItem(item.id);
                            if (result.success) {
                                ownedItems.add(item.id);
                                renderItems(items, category);
                            }
                        } catch (error) {
                            console.error('Buy failed:', error);
                        }
                    });
                }

                if (equipBtn) {
                    equipBtn.addEventListener('click', async () => {
                        try {
                            const result = await equipItem(item.id);
                            if (result.success) {
                                equippedItems[item.category] = item.id;
                                renderItems(items, category);
                                updateAvatar();
                            }
                        } catch (error) {
                            console.error('Equip failed:', error);
                        }
                    });
                }

                if (unequipBtn) {
                    unequipBtn.addEventListener('click', async () => {
                     console.log("Item being unequipped:", item); // Debug log
                     if (!item.category) {
                        console.error("Cannot unequip - item has no category:", item);
                        return;
                    }
                        try {
                            const result = await unequipItem(item.category); 
                            if (result.success) {
                                equippedItems[item.category] = null;
                                renderItems(items, category);
                                updateAvatar();
                            }
                        } catch (error) {
                            console.error('Unequip failed:', error);
                        }
                    });
                }

                container.appendChild(card);
            });
        }

        function updateCoinsDisplay() {
            document.querySelector('.coin-box span').textContent = coins;
        }

        function updateAvatar() {
            const clothingContainer = document.querySelector('.clothing-layers');
            clothingContainer.innerHTML = '';

            Object.entries(equippedItems).forEach(([category, id]) => {
                if (id) {
                    const item = allItems.find(it => it.id === id);
                    if (item) {
                        const img = new Image();
                        img.src = item.image;
                        img.className = 'clothing-layer';
                        img.style.position = 'absolute'; // Explicit positioning
                        
                        img.onload = () => {
                            console.log(`Image loaded: ${img.src} (${img.naturalWidth}x${img.naturalHeight})`);
                            clothingContainer.appendChild(img);
                        };
                        
                        img.onerror = () => console.error("Failed to load:", item.image);
                    }
                }
            });
        }

        async function buyItem(itemId) {
            try {
                const response = await fetch('/api/store/buy', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ item_id: itemId }) 
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || 'Buy failed');
                }

                const data = await response.json();
                coins = data.coins; // Update coins 
                updateCoinsDisplay();
                return data;
            } catch (error) {
                console.error('Buy error:', error);
                alert(error.message);
                return { error: error.message };
            }
        }

        async function equipItem(itemId) { 
            try {
                const response = await fetch('/api/store/equip', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ item_id: itemId }) 
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || 'Equip failed');
                }

                return await response.json();
            } catch (error) {
                console.error('Equip error:', error);
                alert(error.message);
                return { error: error.message };
            }
        }

        async function unequipItem(category) {
            try {
                console.log("Attempting to unequip:", category);
                
                // Debug: Check the payload before sending
                const payload = { category: category };
                console.log("Payload being sent:", payload);

                const response = await fetch('/api/store/unequip', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(payload) // Clean payload without embedded console.log
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || 'Unequip failed');
                }

                return await response.json();
            } catch (error) {
                console.error('Unequip error:', error);
                alert(error.message);
                return { error: error.message };
            }
        }

        async function fetchCoinBalance() {
            const response = await fetch('/store');
            const text = await response.text();
            const parser = new DOMParser();
            const doc = parser.parseFromString(text, 'text/html');
            const coinElement = doc.querySelector('.coin-box span');
            if (coinElement) {
                coins = parseInt(coinElement.textContent) || 0;
                updateCoinsDisplay();
            }
        }

        document.addEventListener('DOMContentLoaded', async () => {
            await fetchCoinBalance();
            await fetchUserItems();
            await initializeStore(); 
            fetchItems('head'); 
        });


        document.querySelectorAll('.tab-button').forEach(btn => {
            btn.addEventListener('click', () => {
                document.querySelectorAll('.tab-button').forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                fetchItems(btn.dataset.category);
            });
        });
    </script>


</body>

</html>


