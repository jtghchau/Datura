<div class="study-timer-container">
        <h5>Study Timer</h5>
        <!-- Setup view -->
        <div id="timerSetup">
            <div class="timer-inputs">
                <div>
                    <p>Hours</p>
                    <input type="number" id="hoursInput" min="0" max="23" placeholder="00">
                </div>
                <div>
                    <p>Minutes</p>
                    <input type="number" id="minutesInput" min="0" max="59" placeholder="00">
                </div>
                <div>
                    <button id="startBtn">Start</button>
                </div>
            </div>
        </div>

        <!-- Countdown view -->
        <div id="timerCountdown" style="display: none;">
            <div class="timer-display" id="timerDisplay">00:00:00</div>
            <div class="progress-bar-container">
            <div class="progress-bar" id="progressBar"></div>
            </div>
            <div class="timer-buttons">
                <button id="restartBtn"><i class="bi bi-x"></i></button>
                <button id="pauseBtn"><i id="pauseIcon" class="bi bi-pause-fill"></i></i></button>
            </div>
        </div>
    </div>

    {{!-- style="display: none;" --}}
    <div id="subjectWarning" class="alert" style="display: none;">
        <span>Please select a Category before starting the timer!</span>
    </div>



    <div id="popupOverlay" class="popup-overlay" style="display: none;">
        <div id="timerPopup" class="timer-popup">
            <h2>Time's up!</h2>
            <p style="font-weight: bold; margin: 0;">Coins earned:</p>
            <div class="popup-coinbox">
                <img src="/images/coin.png" alt="Coin"> 
                <span id="coinsEarned">0</span>
            </div>
            <p>Great job, you completed your study session. Reset your timer to continue studying or take a break!</p>
            <button id="closePopupBtn">Close</button>
        </div>
    </div>



    <script>
    let timer;
    let totalSeconds = 0;
    let remainingSeconds = 0;
    let isPaused = false;
    let sessionStartTime;
    const TIMER_STATE_KEY = 'studyTimerState';


    const setupView = document.getElementById('timerSetup');
    const countdownView = document.getElementById('timerCountdown');
    const display = document.getElementById('timerDisplay');
    const progressBar = document.getElementById('progressBar');
    const startBtn = document.getElementById('startBtn');
    const pauseBtn = document.getElementById('pauseBtn');
    const restartBtn = document.getElementById('restartBtn');
    const hoursInput = document.getElementById('hoursInput');
    const minutesInput = document.getElementById('minutesInput');

    // Get the warning message element
    const subjectWarning = document.getElementById('subjectWarning');

    document.addEventListener('DOMContentLoaded', async () => {
        const selectedSubjectId = localStorage.getItem('selectedSubjectId');
        const selectedSubjectValue = localStorage.getItem('selectedSubjectValue');

        if (selectedSubjectId && selectedSubjectValue) {
            try {
                const res = await fetch(`/api/categories/${selectedSubjectId}`);
                if (!res.ok) throw new Error('Subject not found');

                const data = await res.json();
                window.selectedSubjectId = data.category_id;
                window.selectedSubjectValue = data.category_name;

                console.log('Validated Subject:', data.category_name);
            } catch (err) {
                console.warn('Invalid subject in localStorage, clearing it...');
                localStorage.removeItem('selectedSubjectId');
                localStorage.removeItem('selectedSubjectValue');
                window.selectedSubjectId = null;
                window.selectedSubjectValue = null;
            }
        }
        
        // Restore timer state if available
        restoreTimerState();
    });

    document.addEventListener('visibilitychange', () => {
        if (document.visibilityState === 'visible' && timer) {
            // When coming back to the page, recalculate remaining time
            const savedState = localStorage.getItem(TIMER_STATE_KEY);
            if (savedState) {
                const state = JSON.parse(savedState);
                if (!state.isPaused && state.remainingSeconds > 0) {
                    const elapsedSeconds = Math.floor((new Date() - new Date(state.sessionStartTime)) / 1000);
                    remainingSeconds = Math.max(0, state.totalSeconds - elapsedSeconds);
                    updateDisplay();
                    saveTimerState();
                    
                    if (remainingSeconds === 0) {
                        clearInterval(timer);
                        document.getElementById('popupOverlay').style.display = 'flex';
                        saveSessionToDatabase();
                        sessionSaved = true;
                        clearTimerState();
                    }
                }
            }
        }
    });


    function formatTime(seconds) {
        const hrs = String(Math.floor(seconds / 3600)).padStart(2, '0');
        const mins = String(Math.floor((seconds % 3600) / 60)).padStart(2, '0');
        const secs = String(seconds % 60).padStart(2, '0');
        return `${hrs}:${mins}:${secs}`;
    }

    function updateDisplay() {
        display.textContent = formatTime(remainingSeconds);

        const progress = ((totalSeconds - remainingSeconds) / totalSeconds) * 100;
        progressBar.style.width = `${progress}%`;
    }

    let sessionSaved = false;  // Flag to prevent duplicate saves

    function startTimer() {
        if (!window.selectedSubjectValue) {
            subjectWarning.style.display = 'block';
            return;
        }

        subjectWarning.style.display = 'none';

        const hours = parseInt(hoursInput.value) || 0;
        const minutes = parseInt(minutesInput.value) || 0;

        totalSeconds = remainingSeconds = hours * 3600 + minutes * 60;

        if (totalSeconds <= 0) return;

        setupView.style.display = 'none';
        countdownView.style.display = 'block';
        updateDisplay();

        sessionStartTime = new Date();
        
        // Save initial timer state
        saveTimerState();

        timer = setInterval(() => {
            if (!isPaused && remainingSeconds > 0) {
                remainingSeconds--;
                updateDisplay();
                saveTimerState(); // Save state every second
            }

            if (remainingSeconds === 0 && !sessionSaved) {
                clearInterval(timer);
                document.getElementById('popupOverlay').style.display = 'flex';
                saveSessionToDatabase();
                sessionSaved = true;
                clearTimerState(); // Clear saved state when timer completes
            }
        }, 1000);
    }

    function saveTimerState() {
        const timerState = {
            totalSeconds,
            remainingSeconds,
            isPaused,
            sessionStartTime: sessionStartTime.toISOString(),
            sessionSaved
        };
        localStorage.setItem(TIMER_STATE_KEY, JSON.stringify(timerState));
    }

    function clearTimerState() {
        localStorage.removeItem(TIMER_STATE_KEY);
    }

    function restoreTimerState() {
        const savedState = localStorage.getItem(TIMER_STATE_KEY);
        if (!savedState) return false;

        try {
            const state = JSON.parse(savedState);
            
            // Don't calculate elapsed time if timer was paused
            if (!state.isPaused && state.remainingSeconds > 0) {
                const elapsedSeconds = Math.floor((new Date() - new Date(state.sessionStartTime)) / 1000);
                state.remainingSeconds = Math.max(0, state.totalSeconds - elapsedSeconds);
                
                if (state.remainingSeconds === 0) {
                    // Timer should have completed while away
                    clearTimerState();
                    return false;
                }
            }

            totalSeconds = state.totalSeconds;
            remainingSeconds = state.remainingSeconds;
            isPaused = state.isPaused;
            sessionStartTime = new Date(state.sessionStartTime);
            sessionSaved = state.sessionSaved;

            if (remainingSeconds > 0) {
                setupView.style.display = 'none';
                countdownView.style.display = 'block';
                updateDisplay();
                
                // Update pause button icon
                const pauseIcon = document.getElementById('pauseIcon');
                if (isPaused) {
                    pauseIcon.classList.remove('bi-pause-fill');
                    pauseIcon.classList.add('bi-play-fill');
                    
                    // Don't start the interval if timer was paused
                    timer = null;
                } else {
                    pauseIcon.classList.remove('bi-play-fill');
                    pauseIcon.classList.add('bi-pause-fill');
                    
                    // Restart the timer interval if needed
                    if (!timer) {
                        timer = setInterval(() => {
                            if (!isPaused && remainingSeconds > 0) {
                                remainingSeconds--;
                                updateDisplay();
                                saveTimerState();
                            }

                            if (remainingSeconds === 0 && !sessionSaved) {
                                clearInterval(timer);
                                document.getElementById('popupOverlay').style.display = 'flex';
                                saveSessionToDatabase();
                                sessionSaved = true;
                                clearTimerState();
                            }
                        }, 1000);
                    }
                }
                
                return true;
            }
        } catch (e) {
            console.error('Error restoring timer state:', e);
            clearTimerState();
        }
        return false;
    }

    document.getElementById('closePopupBtn').addEventListener('click', () => {
        const earnedCoins = parseInt(document.getElementById('coinsEarned').textContent, 10);
        const coinDisplay = document.getElementById('coinDisplay');

        if (coinDisplay && !isNaN(earnedCoins)) {
            const currentCoins = parseInt(coinDisplay.textContent, 10) || 0;
            coinDisplay.textContent = currentCoins + earnedCoins;
        }

        document.getElementById('popupOverlay').style.display = 'none';
        restartTimer();
    });


    function pauseTimer() {
        isPaused = !isPaused;
        const pauseIcon = document.getElementById('pauseIcon');

        if (isPaused) {
            pauseIcon.classList.remove('bi-pause-fill');
            pauseIcon.classList.add('bi-play-fill');
            
            clearInterval(timer);
            timer = null;
        } else {
            pauseIcon.classList.remove('bi-play-fill');
            pauseIcon.classList.add('bi-pause-fill');
            
            // Restart the interval when unpaused
            if (!timer) {
                timer = setInterval(() => {
                    if (!isPaused && remainingSeconds > 0) {
                        remainingSeconds--;
                        updateDisplay();
                        saveTimerState();
                    }

                    if (remainingSeconds === 0 && !sessionSaved) {
                        clearInterval(timer);
                        document.getElementById('popupOverlay').style.display = 'flex';
                        saveSessionToDatabase();
                        sessionSaved = true;
                        clearTimerState();
                    }
                }, 1000);
            }
        }
        
        // Save the state immediately when pausing/unpausing
        saveTimerState();
    }


    function restartTimer() {
        if (!sessionSaved) {
            saveSessionToDatabase();
        }

        clearInterval(timer);
        timer = null;
        remainingSeconds = 0;
        totalSeconds = 0;
        progressBar.style.width = '0%';
        isPaused = false;
        sessionSaved = false;

        const pauseIcon = document.getElementById('pauseIcon');
        pauseIcon.classList.remove('bi-play-fill');
        pauseIcon.classList.add('bi-pause-fill');

        setupView.style.display = 'block';
        countdownView.style.display = 'none';
        document.getElementById('popupOverlay').style.display = 'none';
        
        clearTimerState();
    }


    // Function to save the session to the database
    function saveSessionToDatabase() {
    const subjectName = localStorage.getItem('selectedSubjectValue');
    const subjectId = localStorage.getItem('selectedSubjectId');

    if (!subjectName) {
        alert("Please select a subject before finishing the session!");
        return;
    }

    const totalMinutes = Math.round((totalSeconds - remainingSeconds) / 60);
    const startTime = sessionStartTime;
    const endTime = new Date();

    fetch('/api/sessions', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            title: subjectName, // Use the fresh one from localStorage
            start_time: startTime.toISOString(),
            end_time: endTime.toISOString(),
            total_minutes: totalMinutes,
        }),
    })
    .then(response => response.json())
    .then(data => {
        if (data.message === 'Session saved successfully.') {
            updateCalendar();
            showCoinPopup(totalMinutes);  // Show the popup with the coins earned
            sessionSaved = true;  // Set flag to true to prevent duplicate saves
        } else {
            console.log('Failed to save session.');
        }
    })
    .catch(err => {
        console.error('Error saving session:', err);
    });
}

// Function to show the coin popup after the session is saved
function showCoinPopup(totalMinutes) {
    const coinsEarned = totalMinutes;
    const coinsElement = document.getElementById('coinsEarned');

    // Make sure the coins element is updated correctly
    if (coinsElement) {
        coinsElement.textContent = coinsEarned;
    } else {
        console.error('Error: Coin element not found.');
    }

    // Show the popup overlay with the updated coin count
    const popupOverlay = document.getElementById('popupOverlay');
    if (popupOverlay) {
        popupOverlay.style.display = 'flex';  // Show the popup overlay
    } else {
        console.error('Error: Popup overlay element not found.');
    }
}



    // Fetch the sessions from the backend and update the calendar
    function updateCalendar() {
        fetch('/api/sessions')
        .then(response => response.json())
        .then(sessions => {
            updateCalendarView(sessions);
        })
        .catch(err => {
            console.error('Error fetching sessions:', err);
        });
    }

    // Function to update the calendar with new session data
    function updateCalendarView(sessions) {
        sessions.forEach(session => {
            const event = {
                title: session.title,
                start: session.start,
                end: session.end,
                color: session.color,
            };
        });
    }

    startBtn.addEventListener('click', startTimer);
    pauseBtn.addEventListener('click', pauseTimer);
    restartBtn.addEventListener('click', restartTimer);
</script>