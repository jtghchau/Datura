<div class="study-timer-container">
        <h5>Study Timer</h5>
        <!-- Setup view -->
        <div id="timerSetup">
            <div class="timer-inputs">
                <div>
                    <p>Hours</p>
                    <input type="number" id="hoursInput" min="0" max="23" placeholder="00">
                </div>
                <div>
                    <p>Minutes</p>
                    <input type="number" id="minutesInput" min="0" max="59" placeholder="00">
                </div>
                <div>
                    <button id="startBtn">Start</button>
                </div>
            </div>
        </div>

        <!-- Countdown view -->
        <div id="timerCountdown" style="display: none;">
            <div class="timer-display" id="timerDisplay">00:00:00</div>
            <div class="progress-bar-container">
            <div class="progress-bar" id="progressBar"></div>
            </div>
            <div class="timer-buttons">
                <button id="restartBtn"><i class="bi bi-x"></i></button>
                <button id="pauseBtn"><i id="pauseIcon" class="bi bi-pause-fill"></i></i></button>
            </div>
        </div>
    </div>

    {{!-- style="display: none;" --}}
    <div id="subjectWarning" class="alert" style="display: none;">
        <span>Please select a Category before starting the timer!</span>
    </div>



    <div id="popupOverlay" class="popup-overlay" style="display: none;">
        <div id="timerPopup" class="timer-popup">
            <h2>Time's up!</h2>
            <p>Great job, you completed your study session. Reset your timer to continue studying or take a break!</p>
            <button id="closePopupBtn">Close</button>
        </div>
    </div>



    <script>
    let timer;
    let totalSeconds = 0;
    let remainingSeconds = 0;
    let isPaused = false;
    let sessionStartTime;

    const setupView = document.getElementById('timerSetup');
    const countdownView = document.getElementById('timerCountdown');
    const display = document.getElementById('timerDisplay');
    const progressBar = document.getElementById('progressBar');
    const startBtn = document.getElementById('startBtn');
    const pauseBtn = document.getElementById('pauseBtn');
    const restartBtn = document.getElementById('restartBtn');
    const hoursInput = document.getElementById('hoursInput');
    const minutesInput = document.getElementById('minutesInput');

    // Get the warning message element
    const subjectWarning = document.getElementById('subjectWarning');

    document.addEventListener('DOMContentLoaded', async () => {
        const selectedSubjectId = localStorage.getItem('selectedSubjectId');
        const selectedSubjectValue = localStorage.getItem('selectedSubjectValue');

        if (selectedSubjectId && selectedSubjectValue) {
            try {
                const res = await fetch(`/api/categories/${selectedSubjectId}`);
                if (!res.ok) throw new Error('Subject not found');

                const data = await res.json();
                window.selectedSubjectId = data.category_id;
                window.selectedSubjectValue = data.category_name;

                console.log('Validated Subject:', data.category_name);
            } catch (err) {
                console.warn('Invalid subject in localStorage, clearing it...');
                localStorage.removeItem('selectedSubjectId');
                localStorage.removeItem('selectedSubjectValue');
                window.selectedSubjectId = null;
                window.selectedSubjectValue = null;
            }
        }
    });


    function formatTime(seconds) {
        const hrs = String(Math.floor(seconds / 3600)).padStart(2, '0');
        const mins = String(Math.floor((seconds % 3600) / 60)).padStart(2, '0');
        const secs = String(seconds % 60).padStart(2, '0');
        return `${hrs}:${mins}:${secs}`;
    }

    function updateDisplay() {
        display.textContent = formatTime(remainingSeconds);

        const progress = ((totalSeconds - remainingSeconds) / totalSeconds) * 100;
        progressBar.style.width = `${progress}%`;
    }

    function startTimer() {
        if (!window.selectedSubjectValue) {
            // If no subject is selected, show the warning message
            subjectWarning.style.display = 'block';
            return; // Don't start the timer if no subject is selected
        }

        // Hide the warning if a subject is selected
        subjectWarning.style.display = 'none';

        // Get the hours and minutes entered by the user
        const hours = parseInt(hoursInput.value) || 0;  // Default to 0 if not entered
        const minutes = parseInt(minutesInput.value) || 0;

        // Convert the time into total seconds (easier to work with)
        totalSeconds = remainingSeconds = hours * 3600 + minutes * 60;

        // If the total time is 0 or less, don't start the timer
        if (totalSeconds <= 0) return;

        // Hide the setup and show the countdown
        setupView.style.display = 'none';
        countdownView.style.display = 'block';

        // Update the display immediately with the initial time
        updateDisplay();

        sessionStartTime = new Date();

        // Start a timer that updates every second
        timer = setInterval(() => {
            if (!isPaused && remainingSeconds > 0) {
                remainingSeconds--;
                updateDisplay();
            }

            // When the timer reaches 0, stop and show the "Time's up" popup
            if (remainingSeconds === 0) {
                clearInterval(timer);
                document.getElementById('popupOverlay').style.display = 'flex';
                saveSessionToDatabase();  // Save the session data when the timer finishes
            }
        }, 1000);
    }

    document.getElementById('closePopupBtn').addEventListener('click', () => {
        document.getElementById('popupOverlay').style.display = 'none';
        restartTimer();
    });

    function pauseTimer() {
        isPaused = !isPaused;
        const pauseIcon = document.getElementById('pauseIcon');

        if (isPaused) {
            // Change icon to 'play' when paused
            pauseIcon.classList.remove('bi-pause-fill');
            pauseIcon.classList.add('bi-play-fill');
        } else {
            // Change icon to 'pause' when resumed
            pauseIcon.classList.remove('bi-play-fill');
            pauseIcon.classList.add('bi-pause-fill');
        }
    }

    function restartTimer() {
        // Save the session before resetting the timer
        saveSessionToDatabase(); 

        // Clear the interval to stop the current timer
        clearInterval(timer);

        // Reset state
        remainingSeconds = 0;
        totalSeconds = 0;
        progressBar.style.width = '0%';
        isPaused = false;

        // Reset the pause button to its initial state (pause icon)
        const pauseIcon = document.getElementById('pauseIcon');
        pauseIcon.classList.remove('bi-play-fill');
        pauseIcon.classList.add('bi-pause-fill');

        // Hide the countdown view and show the setup view
        setupView.style.display = 'block';
        countdownView.style.display = 'none';
    }

    // Function to save the session to the database
    function saveSessionToDatabase() {
        const subjectName = localStorage.getItem('selectedSubjectValue');
        const subjectId = localStorage.getItem('selectedSubjectId'); // Optional, in case you want to use ID later

        if (!subjectName) {
            alert("Please select a subject before finishing the session!");
            return;
        }

        const totalMinutes = Math.round((totalSeconds - remainingSeconds) / 60);
        const startTime = sessionStartTime;
        const endTime = new Date();

        fetch('/api/sessions', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                title: subjectName, // Use the fresh one from localStorage
                start_time: startTime.toISOString(),
                end_time: endTime.toISOString(),
                total_minutes: totalMinutes,
            }),
        })
        .then(response => response.json())
        .then(data => {
            if (data.message === 'Session saved successfully.') {
                alert('Session saved successfully!');
                updateCalendar();
            } else {
                alert('Failed to save session.');
            }
        })
        .catch(err => {
            console.error('Error saving session:', err);
            alert('Error saving session.');
        });
    }

    // Fetch the sessions from the backend and update the calendar
    function updateCalendar() {
        fetch('/api/sessions')
        .then(response => response.json())
        .then(sessions => {
            updateCalendarView(sessions);
        })
        .catch(err => {
            console.error('Error fetching sessions:', err);
        });
    }

    // Function to update the calendar with new session data
    function updateCalendarView(sessions) {
        sessions.forEach(session => {
            const event = {
                title: session.title,
                start: session.start,
                end: session.end,
                color: session.color,
            };
        });
    }

    startBtn.addEventListener('click', startTimer);
    pauseBtn.addEventListener('click', pauseTimer);
    restartBtn.addEventListener('click', restartTimer);
</script>