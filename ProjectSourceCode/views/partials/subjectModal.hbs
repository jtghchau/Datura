<!-- Subject Edit Modal -->
    <div class="modal fade" id="subjectModal" tabindex="-1" aria-labelledby="subjectModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content shadow">
        <div class="modal-header">
            <h5 class="modal-title" id="subjectModalLabel">Edit Subject</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        
        <div class="modal-body">
            <form id="subjectForm">
            <!-- Subject Name -->
            <div class="mb-3">
                <label for="subjectNameInput" class="form-label">Subject Name</label>
                <input type="text" class="form-control" id="subjectNameInput" placeholder="Enter subject">
                <div class="form-text text-danger d-none" id="subjectNameError">Please enter a subject.</div>
            </div>

            <!-- Subject Color -->
            <div class="mb-3">
                <label for="subjectColorInput" class="form-label">Category Color</label>
                <input type="color" class="form-control form-control-color" id="subjectColorInput" title="Choose your color">
                <div class="form-text text-danger d-none" id="subjectColorError">Please choose a color.</div>
            </div>
            </form>
        </div>

        <div class="modal-footer justify-content-between">
            <!-- Bottom Left Create New Button -->
            <div id="createNewWrapper">
                <button type="button" class="btn btn-success" id="createNewSubjectBtn">Create New</button>
            </div>

            <!-- Bottom Right Buttons -->
            <div>
            <button type="button" class="btn btn-outline-danger" id="deleteSubjectBtn">Delete Category</button>
            <button type="button" class="btn btn-primary" id="saveSubjectBtn">Save</button>
            </div>
        </div>
        </div>
    </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        let selectedSubjectValue = null;
        let selectedSubjectColor = null;

        const subjectDropdown = document.getElementById('subjectDropdown');
        const subjectSpan = document.getElementById('selectedSubject');
        const addSubjectBtn = document.getElementById('addSubjectBtn');
        const subjectModal = new bootstrap.Modal(document.getElementById('subjectModal'));

        // Restore from localStorage on page load
        window.addEventListener('DOMContentLoaded', () => {
            const storedValue = localStorage.getItem('selectedSubjectValue');
            const storedColor = localStorage.getItem('selectedSubjectColor');

            if (storedValue && storedColor) {
                selectedSubjectValue = storedValue;
                selectedSubjectColor = storedColor;

                subjectSpan.innerHTML = `
                    <span class="subject-color-circle" style="background-color: ${selectedSubjectColor}; margin-right: 8px;"></span>
                    ${selectedSubjectValue}
                `;
                subjectSpan.classList.remove('placeholder-text');
            }
        });


        const nameInput = document.getElementById('subjectNameInput');
        const colorInput = document.getElementById('subjectColorInput');
        const nameError = document.getElementById('subjectNameError');
        const colorError = document.getElementById('subjectColorError');

        // Handle dropdown subject selection
        document.querySelectorAll('.dropdown-item').forEach(item => {
            item.addEventListener('click', event => {
                selectedSubjectValue = item.getAttribute('data-value');
                selectedSubjectColor = item.getAttribute('data-color');

                // Save to localStorage
                localStorage.setItem('selectedSubjectValue', selectedSubjectValue);
                localStorage.setItem('selectedSubjectColor', selectedSubjectColor);

                subjectSpan.innerHTML = `
                    <span class="subject-color-circle" style="background-color: ${selectedSubjectColor}; margin-right: 8px;"></span>
                    ${selectedSubjectValue}
                `;
                subjectSpan.classList.remove('placeholder-text');
            });
        });


        // Open modal with pre-filled values
        addSubjectBtn.addEventListener('click', () => {
            nameInput.value = selectedSubjectValue || '';
            colorInput.value = selectedSubjectColor || '#ffffff'; // fallback color
            hideErrors();
            updateModalUI();
            subjectModal.show();
        });



        // Create new resets modal
        document.getElementById('createNewSubjectBtn').addEventListener('click', () => {
            selectedSubjectValue = null;
            selectedSubjectColor = null;
            nameInput.value = '';
            colorInput.value = '#ffffff';
            hideErrors();
            updateModalUI();

            localStorage.removeItem('selectedSubjectValue');
            localStorage.removeItem('selectedSubjectColor');
        });

        // Save button logic
        document.getElementById('saveSubjectBtn').addEventListener('click', () => {
            const name = nameInput.value.trim();
            const color = colorInput.value;

            let hasError = false;
            if (!name) {
                nameError.classList.remove('d-none');
                hasError = true;
            } else {
                nameError.classList.add('d-none');
            }

            if (!color || color.toLowerCase() === '#ffffff') {
                colorError.classList.remove('d-none');
                hasError = true;
            } else {
                colorError.classList.add('d-none');
            }

            if (hasError) return;

            if (selectedSubjectValue) {
                const dropdownItems = document.querySelectorAll('.dropdown-item');
                let categoryIdToUpdate = null;

                dropdownItems.forEach(item => {
                    if (item.getAttribute('data-value') === selectedSubjectValue) {
                    categoryIdToUpdate = item.getAttribute('data-id');
                    }
                });

                if (!categoryIdToUpdate) {
                    console.error('Could not find category to update');
                    return;
                }

                fetch(`/api/categories/${categoryIdToUpdate}`, {
                    method: 'PUT',
                    headers: {
                    'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                    category_name: name,
                    category_color: color
                    })
                })
                .then(res => res.json())
                .then(data => {
                    if (data.error) {
                    console.error('Failed to update category:', data.error);
                    return;
                    }

                    dropdownItems.forEach(item => {
                    if (item.getAttribute('data-id') === categoryIdToUpdate) {
                        item.setAttribute('data-value', data.category_name);
                        item.setAttribute('data-color', data.category_color);
                        item.innerHTML = `
                        <span class="subject-color-circle" style="background-color: ${data.category_color}; margin-right: 8px;"></span>
                        ${data.category_name}
                        `;

                        item.addEventListener('click', function () {
                        selectedSubjectValue = this.getAttribute('data-value');
                        selectedSubjectColor = this.getAttribute('data-color');

                        subjectSpan.innerHTML = `
                            <span class="subject-color-circle" style="background-color: ${selectedSubjectColor}; margin-right: 8px;"></span>
                            ${selectedSubjectValue}
                        `;
                        subjectSpan.classList.remove('placeholder-text');
                        });
                    }
                    });

                    selectedSubjectValue = data.category_name;
                    selectedSubjectColor = data.category_color;
                    subjectSpan.innerHTML = `
                    <span class="subject-color-circle" style="background-color: ${data.category_color}; margin-right: 8px;"></span>
                    ${data.category_name}
                    `;
                    subjectSpan.classList.remove('placeholder-text');

                    subjectModal.hide();
                })
                .catch(err => {
                    console.error('Error updating category:', err);
                });
                }


            else {
                fetch('/api/categories', {
                    method: 'POST',
                    headers: {
                    'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                    category_name: name,
                    category_color: color
                    })
                })
                .then(res => res.json())
                .then(data => {
                    if (data.error) {
                    console.error('Failed to create category:', data.error);
                    return;
                    }

                    const newItem = document.createElement('li');
                    newItem.innerHTML = `
                    <a class="dropdown-item d-flex align-items-center" href="#" data-value="${data.category_name}" data-color="${data.category_color}" data-id="${data.category_id}">
                        <span class="subject-color-circle" style="background-color: ${data.category_color}; margin-right: 8px;"></span>
                        ${data.category_name}
                    </a>
                    `;

                    newItem.querySelector('a').addEventListener('click', function () {
                    selectedSubjectValue = this.getAttribute('data-value');
                    selectedSubjectColor = this.getAttribute('data-color');

                    subjectSpan.innerHTML = `
                        <span class="subject-color-circle" style="background-color: ${selectedSubjectColor}; margin-right: 8px;"></span>
                        ${selectedSubjectValue}
                    `;
                    subjectSpan.classList.remove('placeholder-text');
                    });

                    document.querySelector('.custom-dropdown').appendChild(newItem);

                    // Select the new one
                    selectedSubjectValue = data.category_name;
                    selectedSubjectColor = data.category_color;
                    subjectSpan.innerHTML = `
                    <span class="subject-color-circle" style="background-color: ${data.category_color}; margin-right: 8px;"></span>
                    ${data.category_name}
                    `;
                    subjectSpan.classList.remove('placeholder-text');

                    subjectModal.hide();
                })
                .catch(err => {
                    console.error('Error creating category:', err);
                });
            }


        subjectModal.hide();
    });

    // Delete Category logic
    document.getElementById('deleteSubjectBtn').addEventListener('click', () => {
    if (selectedSubjectValue) {
        // We're editing
        const dropdownItems = document.querySelectorAll('.dropdown-item');
        let categoryIdToDelete = null;

        dropdownItems.forEach(item => {
            if (item.getAttribute('data-value') === selectedSubjectValue) {
                categoryIdToDelete = item.getAttribute('data-id');
            }
        });

        if (!categoryIdToDelete) {
            console.error('Could not find category to delete');
            return;
        }

        console.log(`/api/categories/${categoryIdToDelete}`); //debugging log
        fetch(`/api/categories/${categoryIdToDelete}`, {
            method: 'DELETE'
        })
        .then(res => res.json())
        .then(data => {
            if (data.error) {
                console.error('Failed to delete category:', data.error);
                return;
            }

            // Remove from dropdown
            dropdownItems.forEach(item => {
                if (item.getAttribute('data-id') === categoryIdToDelete) {
                    item.parentElement.remove(); // remove <li>
                }
            });

            // Reset the UI
            selectedSubjectValue = null;
            selectedSubjectColor = null;
            subjectSpan.innerHTML = 'Select Category';
            subjectSpan.classList.add('placeholder-text');
            nameInput.value = '';
            colorInput.value = '#ffffff';
            hideErrors();

            // Clear localStorage
            localStorage.removeItem('selectedSubjectValue');
            localStorage.removeItem('selectedSubjectColor');

            subjectModal.hide();
        })
        .catch(err => {
            console.error('Error deleting category:', err);
        });
    } else {
        // We're in create mode — just cancel
        nameInput.value = '';
        colorInput.value = '#ffffff';
        hideErrors();
        subjectModal.hide();
    }
});



    function hideErrors() {
        nameError.classList.add('d-none');
        colorError.classList.add('d-none');
    }    

//helper for when we open the modal
function updateModalUI() {
    const createWrapper = document.getElementById('createNewWrapper');
    const modalTitle = document.getElementById('subjectModalLabel');
    const deleteBtn = document.getElementById('deleteSubjectBtn');

        console.log('selectedSubjectValue:', selectedSubjectValue); 


    if (selectedSubjectValue) {
        createWrapper.classList.remove('invisible');
        modalTitle.textContent = 'Edit Category';
        deleteBtn.textContent = 'Delete Category';
    } else {
        createWrapper.classList.add('invisible');
        modalTitle.textContent = 'Create Category';
        deleteBtn.textContent = 'Cancel';
    }
}

     </script>

